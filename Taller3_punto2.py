# -*- coding: utf-8 -*-
"""Taller3_Punto2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jqARNAVNpa_CFjyU2todcpQiR9BoOIDo

#Taller 3 Punto 2 - MLOps
##Carmen Carvajal Gutiérrez
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install pycaret

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from pycaret.regression import setup, compare_models, tune_model, finalize_model, save_model

"""#Entendimiento de los datos"""

# Cargar los datos
file_path = '/content/ds_salaries.csv'
data = pd.read_csv(file_path)

#Primeras 5 filas del dataset para entender su estructura
data.head()

# Información básica sobre el tamaño del dataset
print("(filas, columnas):")
print(data.shape)

#Validación de valores nulos en el dataset
print("\nInformación detallada del conjunto de datos:")
data.info()

# Estadísticas descriptivas básicas del dataset
data.describe()

# Distribución de columnas numéricas
numerical_cols = ['salary', 'salary_in_usd', 'remote_ratio']
for col in numerical_cols:
    plt.figure(figsize=(8, 4))
    sns.histplot(data[col], kde=True, bins=30)
    plt.title(f'Distribution of {col}')
    plt.xlabel(col)
    plt.ylabel('Frequency')
    plt.show()

# Mapa de calor de correlación
plt.figure(figsize=(8, 6))
sns.heatmap(data[numerical_cols].corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()

# Diagrama para salarios en USD por nivel de experiencia
plt.figure(figsize=(10, 6))
sns.boxplot(x='experience_level', y='salary_in_usd', data=data)
plt.title('Salary in USD by Experience Level')
plt.xlabel('Experience Level')
plt.ylabel('Salary in USD')
plt.show()

# Diagrama para el tamaño de la empresa
plt.figure(figsize=(8, 4))
sns.countplot(x='company_size', data=data, order=['S', 'M', 'L'])
plt.title('Distribution of Company Sizes')
plt.xlabel('Company Size')
plt.ylabel('Count')
plt.show()

"""#Preparación de los datos"""

# Codificador de variables categóricas
categorical_cols = ['experience_level', 'employment_type', 'job_title',
                    'salary_currency', 'employee_residence', 'company_location', 'company_size']

encoder = LabelEncoder()
for col in categorical_cols:
    data[col] = encoder.fit_transform(data[col])

# Escalado de variables numéricas
scaler = MinMaxScaler()
scaled_cols = ['salary', 'salary_in_usd', 'remote_ratio']
data[scaled_cols] = scaler.fit_transform(data[scaled_cols])

# Vista de los datos procesados
data.head()

"""#Modelación"""

# Configuración del entorno de PyCaret para la regresión
regression_setup = setup(
    data=data,
    target='salary_in_usd',  # Predicción del salario en USD
    session_id=123,
    normalize=True,
    fold=5  # Validación cruzada
)

# Comparar modelos para obtener una visión general
best_models = compare_models(n_select=5)

# Seleccionar los mejores modelos
best_models

# Buscar hiperparámetros óptimos para los mejores modelos ----- No mejoran los modelos con los hiperparámetros, se retorna al resultado original
tuned_models = [tune_model(model) for model in best_models]

"""#Evaluación"""

import matplotlib.pyplot as plt

# Datos de los mejores modelos y sus métricas de desempeño
models = ['Extra Trees Regressor', 'Gradient Boosting Regressor', 'Random Forest Regressor',
          'Light Gradient Boosting Machine', 'Extreme Gradient Boosting']
r2_scores = [0.9736, 0.9717, 0.9655, 0.9637, 0.9544]  # R² de los mejores modelos

# Crear la gráfica de barras
plt.figure(figsize=(10, 6))
plt.barh(models, r2_scores, color='skyblue', edgecolor='black')
plt.xlabel('R² Score (Coeficiente de Determinación)', fontsize=12)
plt.ylabel('Modelos', fontsize=12)
plt.title('Desempeño de los Mejores Modelos Basado en R²', fontsize=14)
plt.gca().invert_yaxis()  # Invertir el eje para mostrar el mejor modelo en la parte superior
plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.show()

"""# Conclusión Final

Con base en las métricas de desempeño, el modelo Extra Trees Regressor (ET) se destaca como el mejor modelo. Este presenta los valores más bajos en errores y uno de los coeficientes de determinación (R²) más altos, lo que indica un ajuste excelente a los datos. A continuación, se destacan sus principales métricas:

- MAE (Error Absoluto Medio): 0.41%. Este es el menor entre todos los modelos evaluados, lo que significa que el error promedio de las predicciones respecto a los valores reales es mínimo.
- MSE (Error Cuadrático Medio): 0.06%. Este valor, también el menor, muestra que los errores grandes tienen un impacto reducido en el modelo.
- RMSE (Raíz del Error Cuadrático Medio): 2.18%. Este resultado indica que las predicciones están estrechamente alineadas con los valores reales, en la misma escala de los datos.
- R² (Coeficiente de Determinación): 97.36%. Este valor demuestra que el modelo es capaz de explicar el 97.36% de la varianza presente en los datos, lo que lo convierte en un modelo altamente explicativo y preciso.

En conclusión, Extra Trees Regressor (ET) ofrece una combinación óptima de precisión y capacidad predictiva, siendo la mejor opción en comparación con los otros modelos evaluados.
"""