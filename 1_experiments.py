# -*- coding: utf-8 -*-
"""1_experiments.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/139VEYCmgRILcNgnKd3FfMu_Qf4tDNANm
"""

import optuna
import mlflow
import pandas as pd
import mlflow.pycaret
from pycaret.regression import setup, create_model, finalize_model
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
from mlflow.models.signature import infer_signature

# Cargar y preparar los datos
file_path = '/content/ds_salaries.csv'
data = pd.read_csv(file_path)

categorical_cols = ['experience_level', 'employment_type', 'job_title',
                    'salary_currency', 'employee_residence', 'company_location', 'company_size']

data = pd.get_dummies(data, columns=categorical_cols)
scaler_cols = ['salary', 'salary_in_usd', 'remote_ratio']
data[scaler_cols] = data[scaler_cols].apply(lambda x: (x - x.min()) / (x.max() - x.min()))

# Configurar experimento en MLflow
mlflow.set_experiment("PyCaret_ExtraTrees_Optuna")

# Función objetivo para Optuna - Hiperparámetros
def objective(trial):
    params = {
        "n_estimators": trial.suggest_int("n_estimators", 50, 500),
        "max_depth": trial.suggest_int("max_depth", 5, 50),
        "min_samples_split": trial.suggest_int("min_samples_split", 2, 20),
        "min_samples_leaf": trial.suggest_int("min_samples_leaf", 1, 20),
        "max_features": trial.suggest_categorical("max_features", ["sqrt", "log2", None]),
    }

    # Configuración de PyCaret
    regression_setup = setup(
        data=data,
        target='salary_in_usd',
        verbose=False,
        normalize=True
    )

    # Crear modelo y evaluar
    model = create_model("et", **params)
    finalized_model = finalize_model(model)

    y_true = regression_setup['y_test']
    y_pred = finalized_model.predict(regression_setup['X_test'])

    r2 = r2_score(y_true, y_pred)
    mae = mean_absolute_error(y_true, y_pred)
    rmse = mean_squared_error(y_true, y_pred, squared=False)

    # Registrar en MLflow
    with mlflow.start_run(nested=True, run_name=f"Trial {trial.number}"):
        mlflow.log_params(params)
        mlflow.log_metric("r2", r2)
        mlflow.log_metric("mae", mae)
        mlflow.log_metric("rmse", rmse)

    return r2

# Ejecutar optimización con Optuna
study = optuna.create_study(direction="maximize")
with mlflow.start_run(run_name="Optuna Optimization"):
    study.optimize(objective, n_trials=20)

    # Registrar mejores resultados en MLflow
    mlflow.log_params(study.best_params)
    mlflow.log_metric("best_r2", study.best_value)

    # Entrenamiento final con mejores hiperparámetros
    final_model = create_model("et", **study.best_params)
    finalized_model = finalize_model(final_model)

    y_true = regression_setup['y_test']
    y_pred = finalized_model.predict(regression_setup['X_test'])

    final_r2 = r2_score(y_true, y_pred)
    final_mae = mean_absolute_error(y_true, y_pred)
    final_rmse = mean_squared_error(y_true, y_pred, squared=False)

    mlflow.log_metric("final_r2", final_r2)
    mlflow.log_metric("final_mae", final_mae)
    mlflow.log_metric("final_rmse", final_rmse)

    signature = infer_signature(regression_setup['X_test'], y_pred)
    mlflow.pycaret.log_model(finalized_model, artifact_path="best_model", signature=signature)

print("Optimización completada. Mejores parámetros:")
print(study.best_params)